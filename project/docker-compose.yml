version: '3'

services:

  broker-service:
    container_name: "broker" # 在 docker 裡面的名字，沒有命名的話，會被 docker 自動取名
    build:
      context: ./../broker-service
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./../broker-service:/app # 掛載，左邊為本機，右邊為 container 內部
    working_dir: /app/cmd/api
    deploy:
      mode: replicated
      replicas: 1
    command: sh entrypoint.sh # 這是為了要讓程式 hang 住

  authentication-service:
    container_name: "authentication"
    build:
      context: ./../authentication-service
    restart: always
    ports:
      - "8081:80"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"
    volumes:
      - ./../authentication-service:/app # 掛載，左邊為本機，右邊為 container 內部
    working_dir: /app/cmd/api
    command: sh entrypoint.sh # 這是為了要讓程式 hang 住

  logger-service:
    container_name: "logger"
    build:
      context: ./../logger-service
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./../logger-service:/app # 掛載，左邊為本機，右邊為 container 內部
    working_dir: /app/cmd/api
    command: sh entrypoint.sh # 這是為了要讓程式 hang 住

  mailer-service:
    container_name: "mailer"
    build:
      context: ./../mail-service
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_ENCRYPTION: none
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      FROM_NAME: "John Smith"
      FROM_ADDRESS: john.smith@example.com
    volumes:
      - ./../mail-service:/app # 掛載，左邊為本機，右邊為 container 內部
    working_dir: /app/cmd/api
    command: sh entrypoint.sh # 這是為了要讓程式 hang 住

  listener-service:
    container_name: "listener"
    build:
      context: ./../listener-service
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./../listener-service:/app # 掛載，左邊為本機，右邊為 container 內部
    working_dir: /app
    command: sh entrypoint.sh # 這是為了要讓程式 hang 住

  postgres:
    container_name: "postgres"
    image: 'postgres:14.0'
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes: # 將 db-data 裡面的 postgres 的資料，跟容器裡 :後這個路徑理的東西，掛載，就是量子糾纏
      - ./db-data/postgres/:/var/lib/postgresql/data/
  mongo:
    container_name: "mongoDB"
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db

  mailhog:
    container_name: "mailhog"
    image: 'mailhog/mailhog:latest'
    ports:
      - "1025:1025"
      - "8025:8025"

  rabbitmq:
    container_name: "rabbitmq"
    image: 'rabbitmq:3.9-alpine'
    ports:
      - "5672:5672"
      - "15672:15672"
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq/